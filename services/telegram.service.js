const TelegramBot = require('node-telegram-bot-api');
const jwt = require('jsonwebtoken');
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE
);

class TelegramService {
    constructor() {
        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
            webHook: {
                port: process.env.PORT || 3000
            }
        });

        this.bot.setWebHook(`${process.env.TELEGRAM_WEBHOOK_URL}`);
        this.setupCommands();
    }

    async setupCommands() {
        await this.bot.setMyCommands([
            { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
            { command: '/login', description: '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
            { command: '/help', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å' }
        ]);
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const user = msg.from;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const { data: existingUser } = await supabase
                .from('telegram_users')
                .select()
                .eq('telegram_id', user.id)
                .single();

            if (!existingUser) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { data: newUser, error } = await supabase
                    .from('telegram_users')
                    .insert([
                        {
                            telegram_id: user.id,
                            username: user.username,
                            first_name: user.first_name,
                            last_name: user.last_name
                        }
                    ])
                    .single();

                if (error) throw error;
            }

            const token = jwt.sign(
                { telegram_id: user.id, username: user.username },
                process.env.JWT_SECRET,
                { expiresIn: '30d' }
            );

            const loginUrl = `${process.env.APP_URL}/auth/telegram-callback?token=${token}`;

            await this.bot.sendMessage(
                chatId,
                `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n\n–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${loginUrl}`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–í–æ–π—Ç–∏ –≤ GlobExPay', url: loginUrl }]
                        ]
                    }
                }
            );
        } catch (error) {
            console.error('Error in handleStart:', error);
            await this.bot.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    }

    async handleLogin(msg) {
        const chatId = msg.chat.id;
        const user = msg.from;

        try {
            const token = jwt.sign(
                { telegram_id: user.id, username: user.username },
                process.env.JWT_SECRET,
                { expiresIn: '30d' }
            );

            const loginUrl = `${process.env.APP_URL}/auth/telegram-callback?token=${token}`;

            await this.bot.sendMessage(
                chatId,
                '–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–í–æ–π—Ç–∏ –≤ GlobExPay', url: loginUrl }]
                        ]
                    }
                }
            );
        } catch (error) {
            console.error('Error in handleLogin:', error);
            await this.bot.sendMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    }

    async handleHelp(msg) {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(
            chatId,
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
            '/login - –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n' +
            '/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n' +
            '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: support@globexpay.ru'
        );
    }

    setupEventHandlers() {
        this.bot.onText(/\/start/, this.handleStart.bind(this));
        this.bot.onText(/\/login/, this.handleLogin.bind(this));
        this.bot.onText(/\/help/, this.handleHelp.bind(this));
    }
}

module.exports = new TelegramService();
