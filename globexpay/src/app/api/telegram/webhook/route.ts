import { NextResponse } from 'next/server';
import { Bot, webhookCallback } from 'grammy';
import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN!);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const chatId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!chatId || !username) {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    const { data: user, error: userError } = await supabase
      .from('telegram_users')
      .upsert({
        telegram_id: chatId,
        username: username,
        last_interaction: new Date().toISOString()
      })
      .select()
      .single();

    if (userError) {
      console.error('Error saving user:', userError);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { telegram_id: chatId, username },
      process.env.JWT_SECRET!,
      { expiresIn: '30d' }
    );

    const loginUrl = `${process.env.NEXT_PUBLIC_APP_URL}/auth/telegram-callback?token=${token}`;

    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobExPay! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üîê –í–æ–π—Ç–∏ –≤ GlobExPay',
            url: loginUrl
          }
        ]]
      }
    });
  } catch (error) {
    console.error('Bot error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
const handler = webhookCallback(bot, 'next-js');

export async function POST(request: Request) {
  try {
    return await handler(request);
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}
